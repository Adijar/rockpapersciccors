{
	"compiler": {
		"version": "0.8.18+commit.87f61d96"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_timeout",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_minimumBet",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_playerOneDeposit",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "player",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "enum RockPaperScissorsLizardSpock.Shape",
						"name": "move",
						"type": "uint8"
					}
				],
				"name": "Move",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "playerOne",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "playerTwo",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "Tie",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "winner",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "TimeOut",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "winner",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "Winner",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "balances",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "betSize",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "completeGame",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "enum RockPaperScissorsLizardSpock.Shape",
						"name": "move",
						"type": "uint8"
					}
				],
				"name": "joinGame",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "minimumBet",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "movePlayerOne",
				"outputs": [
					{
						"internalType": "enum RockPaperScissorsLizardSpock.Shape",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "movePlayerTwo",
				"outputs": [
					{
						"internalType": "enum RockPaperScissorsLizardSpock.Shape",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "playerOne",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "playerOneDeposit",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "playerTwo",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "potSize",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "enum RockPaperScissorsLizardSpock.Shape",
						"name": "move",
						"type": "uint8"
					},
					{
						"internalType": "uint256",
						"name": "nonce",
						"type": "uint256"
					}
				],
				"name": "revealMove",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "hiddenMove",
						"type": "bytes32"
					}
				],
				"name": "startGame",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "state",
				"outputs": [
					{
						"internalType": "enum RockPaperScissorsLizardSpock.GameState",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "timeout",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "timeoutAt",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "target",
						"type": "address"
					}
				],
				"name": "withdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"author": "ChrisiPK",
			"events": {
				"Move(address,uint8)": {
					"params": {
						"move": "The submitted or revealed move",
						"player": "The address of the player making or revealing the move"
					}
				},
				"Tie(address,address,uint256)": {
					"params": {
						"amount": "The amount of coins divided among both players",
						"playerOne": "The first player's address",
						"playerTwo": "The second player's address"
					}
				},
				"TimeOut(address,uint256)": {
					"params": {
						"amount": "The amount of coins won",
						"winner": "The address of the player winning due to the timeout"
					}
				},
				"Winner(address,uint256)": {
					"params": {
						"amount": "The amount of coins won",
						"winner": "The winning player's address"
					}
				}
			},
			"kind": "dev",
			"methods": {
				"joinGame(uint8)": {
					"params": {
						"move": "The second player's move"
					}
				},
				"revealMove(uint8,uint256)": {
					"params": {
						"move": "The first player's move",
						"nonce": "The nonce used to create the hidden move when starting the game"
					}
				},
				"startGame(bytes32)": {
					"details": "Example to create the hidden move using ethers: ethers.utils.keccak256(ethers.utils.defaultAbiCoder.encode([\"uint8\", \"uint256\"], [<<move>>, <<nonce>>]));",
					"params": {
						"hiddenMove": "The first player's move. Consists of the player's move (uint8) and a random nonce (uint256), abi-encoded and hashed using keccak."
					}
				},
				"timeoutAt()": {
					"returns": {
						"_0": "The UNIX timestamp at which the game can be completed"
					}
				},
				"withdraw(address)": {
					"params": {
						"target": "The address to send coins to"
					}
				}
			},
			"title": "An implementation of the \"Rock Paper Scissors Lizard Spock\" game.",
			"version": 1
		},
		"userdoc": {
			"events": {
				"Move(address,uint8)": {
					"notice": "Event emitted when a player submits or reveals a move"
				},
				"Tie(address,address,uint256)": {
					"notice": "Event emitted when the game results in a tie"
				},
				"TimeOut(address,uint256)": {
					"notice": "Event emitted when the game ends due to a timeout"
				},
				"Winner(address,uint256)": {
					"notice": "Event emitted when a player wins the game due to their move"
				}
			},
			"kind": "user",
			"methods": {
				"betSize()": {
					"notice": "The bet, i.e. the amount of money that needs to be sent to join the game"
				},
				"completeGame()": {
					"notice": "Completes the game. This can be called externally when a timeout has occured (see `timeoutAt()`). If the game progresses normally, this will be called automatically when Player One reveals their move."
				},
				"joinGame(uint8)": {
					"notice": "Joins a game as the second player. The value sent to this function must match the `betSize` and is the second player's bet."
				},
				"minimumBet()": {
					"notice": "The minimum amount to bet when starting a new game"
				},
				"playerOneDeposit()": {
					"notice": "The safety deposit to be made by Player One. Will be refunded when the move is revealed."
				},
				"potSize()": {
					"notice": "The pot, i.e. the amount of money that can be won"
				},
				"revealMove(uint8,uint256)": {
					"notice": "Reveals the first player's move and refunds the safety deposit. This automatically completes the game after the move has been revealed."
				},
				"startGame(bytes32)": {
					"notice": "Starts the game with the first player's move. The value sent to this function is the first player's bet including their safety deposit. Deposit will be refunded when the move is revealed."
				},
				"timeout()": {
					"notice": "The timeout (in seconds) after which the game can be completed without waiting for the opponent's action"
				},
				"timeoutAt()": {
					"notice": "Specifies when a game can be completed due to a timeout"
				},
				"withdraw(address)": {
					"notice": "Withdraws coins from the sender's internal balance"
				}
			},
			"notice": "For an exhaustive reference of the rules, see http://www.samkass.com/theories/RPSSL.html",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"rockpsciccors.sol": "RockPaperScissorsLizardSpock"
		},
		"evmVersion": "paris",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"rockpsciccors.sol": {
			"keccak256": "0x197deba5d9e0f71bf6b77d27e06bbeecf83c44e9e842ae5f81120a2d97876302",
			"license": "MIT",
			"urls": [
				"bzz-raw://617f777748f588c085e561f84b6373fd648b7182946771c64e872a92b2d74b9f",
				"dweb:/ipfs/QmXhF7gYbf8u5V5Nabyn3BuNgyPsknAJEAaEessu5ABBhv"
			]
		}
	},
	"version": 1
}